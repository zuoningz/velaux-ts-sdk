/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BcodeBcode,
  V1SimpleResponse,
} from '../models/index';
import {
    BcodeBcodeFromJSON,
    BcodeBcodeToJSON,
    V1SimpleResponseFromJSON,
    V1SimpleResponseToJSON,
} from '../models/index';

export interface ProxyPathRequest {
    subpath: string;
}

/**
 * 
 */
export class CloudshellApi extends runtime.BaseAPI {

    /**
     * destroy the user\'s cloud shell environment
     */
    async destroyCloudShellRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SimpleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cloudshell`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SimpleResponseFromJSON(jsonValue));
    }

    /**
     * destroy the user\'s cloud shell environment
     */
    async destroyCloudShell(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SimpleResponse> {
        const response = await this.destroyCloudShellRaw(initOverrides);
        return await response.value();
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async prepareCloudShellRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SimpleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cloudshell`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SimpleResponseFromJSON(jsonValue));
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async prepareCloudShell(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SimpleResponse> {
        const response = await this.prepareCloudShellRaw(initOverrides);
        return await response.value();
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async proxyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SimpleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/view/cloudshell`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SimpleResponseFromJSON(jsonValue));
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async proxy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SimpleResponse> {
        const response = await this.proxyRaw(initOverrides);
        return await response.value();
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async proxyPathRaw(requestParameters: ProxyPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SimpleResponse>> {
        if (requestParameters.subpath === null || requestParameters.subpath === undefined) {
            throw new runtime.RequiredError('subpath','Required parameter requestParameters.subpath was null or undefined when calling proxyPath.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/view/cloudshell/{subpath}`.replace(`{${"subpath"}}`, encodeURIComponent(String(requestParameters.subpath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SimpleResponseFromJSON(jsonValue));
    }

    /**
     * prepare the user\'s cloud shell environment
     */
    async proxyPath(requestParameters: ProxyPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SimpleResponse> {
        const response = await this.proxyPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
