"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaUIParameterToJSON = exports.SchemaUIParameterFromJSONTyped = exports.SchemaUIParameterFromJSON = exports.instanceOfSchemaUIParameter = void 0;
var runtime_1 = require("../runtime");
var SchemaCondition_1 = require("./SchemaCondition");
var SchemaGroupOption_1 = require("./SchemaGroupOption");
var SchemaStyle_1 = require("./SchemaStyle");
var SchemaValidate_1 = require("./SchemaValidate");
/**
 * Check if a given object implements the SchemaUIParameter interface.
 */
function instanceOfSchemaUIParameter(value) {
    var isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "jsonKey" in value;
    isInstance = isInstance && "label" in value;
    isInstance = isInstance && "sort" in value;
    isInstance = isInstance && "uiType" in value;
    return isInstance;
}
exports.instanceOfSchemaUIParameter = instanceOfSchemaUIParameter;
function SchemaUIParameterFromJSON(json) {
    return SchemaUIParameterFromJSONTyped(json, false);
}
exports.SchemaUIParameterFromJSON = SchemaUIParameterFromJSON;
function SchemaUIParameterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'additional': !(0, runtime_1.exists)(json, 'additional') ? undefined : json['additional'],
        'additionalParameter': !(0, runtime_1.exists)(json, 'additionalParameter') ? undefined : SchemaUIParameterFromJSON(json['additionalParameter']),
        'conditions': !(0, runtime_1.exists)(json, 'conditions') ? undefined : (json['conditions'].map(SchemaCondition_1.SchemaConditionFromJSON)),
        'description': json['description'],
        'disable': !(0, runtime_1.exists)(json, 'disable') ? undefined : json['disable'],
        'jsonKey': json['jsonKey'],
        'label': json['label'],
        'sort': json['sort'],
        'style': !(0, runtime_1.exists)(json, 'style') ? undefined : (0, SchemaStyle_1.SchemaStyleFromJSON)(json['style']),
        'subParameterGroupOption': !(0, runtime_1.exists)(json, 'subParameterGroupOption') ? undefined : (json['subParameterGroupOption'].map(SchemaGroupOption_1.SchemaGroupOptionFromJSON)),
        'subParameters': !(0, runtime_1.exists)(json, 'subParameters') ? undefined : (json['subParameters'].map(SchemaUIParameterFromJSON)),
        'uiType': json['uiType'],
        'validate': !(0, runtime_1.exists)(json, 'validate') ? undefined : (0, SchemaValidate_1.SchemaValidateFromJSON)(json['validate']),
    };
}
exports.SchemaUIParameterFromJSONTyped = SchemaUIParameterFromJSONTyped;
function SchemaUIParameterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'additional': value.additional,
        'additionalParameter': SchemaUIParameterToJSON(value.additionalParameter),
        'conditions': value.conditions === undefined ? undefined : (value.conditions.map(SchemaCondition_1.SchemaConditionToJSON)),
        'description': value.description,
        'disable': value.disable,
        'jsonKey': value.jsonKey,
        'label': value.label,
        'sort': value.sort,
        'style': (0, SchemaStyle_1.SchemaStyleToJSON)(value.style),
        'subParameterGroupOption': value.subParameterGroupOption === undefined ? undefined : (value.subParameterGroupOption.map(SchemaGroupOption_1.SchemaGroupOptionToJSON)),
        'subParameters': value.subParameters === undefined ? undefined : (value.subParameters.map(SchemaUIParameterToJSON)),
        'uiType': value.uiType,
        'validate': (0, SchemaValidate_1.SchemaValidateToJSON)(value.validate),
    };
}
exports.SchemaUIParameterToJSON = SchemaUIParameterToJSON;
