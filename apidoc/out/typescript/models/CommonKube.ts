/* tslint:disable */
/* eslint-disable */
/**
 * Kubevela api doc
 * Kubevela api doc
 *
 * The version of the OpenAPI document: v1beta1
 * Contact: feedback@mail.kubevela.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommonKubeParameter } from './CommonKubeParameter';
import {
    CommonKubeParameterFromJSON,
    CommonKubeParameterFromJSONTyped,
    CommonKubeParameterToJSON,
} from './CommonKubeParameter';

/**
 * 
 * @export
 * @interface CommonKube
 */
export interface CommonKube {
    /**
     * 
     * @type {Array<CommonKubeParameter>}
     * @memberof CommonKube
     */
    parameters?: Array<CommonKubeParameter>;
    /**
     * 
     * @type {string}
     * @memberof CommonKube
     */
    template: string;
}

/**
 * Check if a given object implements the CommonKube interface.
 */
export function instanceOfCommonKube(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "template" in value;

    return isInstance;
}

export function CommonKubeFromJSON(json: any): CommonKube {
    return CommonKubeFromJSONTyped(json, false);
}

export function CommonKubeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonKube {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(CommonKubeParameterFromJSON)),
        'template': json['template'],
    };
}

export function CommonKubeToJSON(value?: CommonKube | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(CommonKubeParameterToJSON)),
        'template': value.template,
    };
}

